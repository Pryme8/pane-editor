[{"F:\\gitHUB\\pane-editor\\src\\editor.tsx":"1","F:\\gitHUB\\pane-editor\\src\\components\\loader\\placeholder.tsx":"2","F:\\gitHUB\\pane-editor\\src\\components\\pane\\pane.tsx":"3","F:\\gitHUB\\pane-editor\\src\\index.tsx":"4","F:\\gitHUB\\pane-editor\\src\\components\\modal\\modal.tsx":"5","F:\\gitHUB\\pane-editor\\src\\components\\pane\\index.ts":"6","F:\\gitHUB\\pane-editor\\src\\constants\\padding.tsx":"7","F:\\gitHUB\\pane-editor\\src\\constants\\bindings.tsx":"8","F:\\gitHUB\\pane-editor\\src\\components\\modal\\modalResize.tsx":"9","F:\\gitHUB\\pane-editor\\src\\components\\inputs\\button.tsx":"10","F:\\gitHUB\\pane-editor\\src\\constants\\index.ts":"11","F:\\gitHUB\\pane-editor\\src\\constants\\text.tsx":"12","F:\\gitHUB\\pane-editor\\src\\components\\modal\\modalControls.tsx":"13","F:\\gitHUB\\pane-editor\\src\\components\\inputs\\index.ts":"14","F:\\gitHUB\\pane-editor\\src\\babylonManager\\core.ts":"15","F:\\gitHUB\\pane-editor\\src\\babylonManager\\engine\\engineCache.ts":"16","F:\\gitHUB\\pane-editor\\src\\windows\\test\\test.tsx":"17","F:\\gitHUB\\pane-editor\\src\\windows\\map.tsx":"18","F:\\gitHUB\\pane-editor\\src\\windows\\test\\testSubSplit.tsx":"19","F:\\gitHUB\\pane-editor\\src\\components\\panel\\splitPanel\\splitPanel.tsx":"20","F:\\gitHUB\\pane-editor\\src\\components\\panel\\index.ts":"21","F:\\gitHUB\\pane-editor\\src\\components\\panel\\splitPanel\\index.ts":"22","F:\\gitHUB\\pane-editor\\src\\constants\\colors.tsx":"23","F:\\gitHUB\\pane-editor\\src\\constants\\shadows.tsx":"24","F:\\gitHUB\\pane-editor\\src\\components\\panel\\tabPanel\\tabPanel.tsx":"25","F:\\gitHUB\\pane-editor\\src\\windows\\test\\index.ts":"26","F:\\gitHUB\\pane-editor\\src\\windows\\grass\\index.ts":"27","F:\\gitHUB\\pane-editor\\src\\windows\\grass\\grassBaseScene.tsx":"28","F:\\gitHUB\\pane-editor\\src\\components\\loader\\index.ts":"29"},{"size":2545,"mtime":1612290010597,"results":"30","hashOfConfig":"31"},{"size":317,"mtime":1611854245264,"results":"32","hashOfConfig":"31"},{"size":2811,"mtime":1611943569465,"results":"33","hashOfConfig":"31"},{"size":289,"mtime":1611855239115,"results":"34","hashOfConfig":"31"},{"size":23845,"mtime":1611943516303,"results":"35","hashOfConfig":"31"},{"size":24,"mtime":1611858719459,"results":"36","hashOfConfig":"31"},{"size":1181,"mtime":1611889409534,"results":"37","hashOfConfig":"31"},{"size":727,"mtime":1611878953375,"results":"38","hashOfConfig":"31"},{"size":2630,"mtime":1611885222995,"results":"39","hashOfConfig":"31"},{"size":2411,"mtime":1611973916818,"results":"40","hashOfConfig":"31"},{"size":130,"mtime":1611967210760,"results":"41","hashOfConfig":"31"},{"size":661,"mtime":1611886644134,"results":"42","hashOfConfig":"31"},{"size":1180,"mtime":1611974009176,"results":"43","hashOfConfig":"31"},{"size":24,"mtime":1611886398048,"results":"44","hashOfConfig":"31"},{"size":891,"mtime":1611946437253,"results":"45","hashOfConfig":"31"},{"size":3281,"mtime":1612225865843,"results":"46","hashOfConfig":"31"},{"size":2775,"mtime":1612290548204,"results":"47","hashOfConfig":"31"},{"size":203,"mtime":1612223548215,"results":"48","hashOfConfig":"31"},{"size":3024,"mtime":1611969719581,"results":"49","hashOfConfig":"31"},{"size":7066,"mtime":1611969063728,"results":"50","hashOfConfig":"31"},{"size":55,"mtime":1611963930545,"results":"51","hashOfConfig":"31"},{"size":28,"mtime":1611963937896,"results":"52","hashOfConfig":"31"},{"size":441,"mtime":1611868812939,"results":"53","hashOfConfig":"31"},{"size":354,"mtime":1611967275713,"results":"54","hashOfConfig":"31"},{"size":5560,"mtime":1611973476051,"results":"55","hashOfConfig":"31"},{"size":54,"mtime":1611961203560,"results":"56","hashOfConfig":"31"},{"size":32,"mtime":1612223512367,"results":"57","hashOfConfig":"31"},{"size":18081,"mtime":1612290537434,"results":"58","hashOfConfig":"31"},{"size":31,"mtime":1611858677107,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"uskinr",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\gitHUB\\pane-editor\\src\\editor.tsx",["127","128"],"F:\\gitHUB\\pane-editor\\src\\components\\loader\\placeholder.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\pane\\pane.tsx",[],"F:\\gitHUB\\pane-editor\\src\\index.tsx",[],["129","130"],"F:\\gitHUB\\pane-editor\\src\\components\\modal\\modal.tsx",["131"],"import { Nullable } from \"@babylonjs/core\";\r\nimport { Component, createRef, CSSProperties } from \"react\";\r\nimport { Colors } from \"../../constants/colors\";\r\nimport { Padding } from \"../../constants/padding\";\r\nimport { IPaneState } from \"../pane\";\r\nimport { ModalResize } from \"./modalResize\";\r\nimport { ModalControls } from \"./modalControls\";\r\n\r\nconst NoSelectStyle: CSSProperties = {\r\n    WebkitTouchCallout: 'none',\r\n    WebkitUserSelect: 'none',\r\n    userSelect: 'none'\r\n}\r\n\r\nconst SelectStyle: CSSProperties = {\r\n    WebkitTouchCallout: 'initial',\r\n    WebkitUserSelect: 'initial',\r\n    userSelect: 'initial'\r\n}\r\n\r\nconst modalWrapperStyle: CSSProperties = {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    pointerEvents: 'initial',\r\n    padding:'3px',\r\n    width: 'auto',\r\n    height: 'auto',\r\n    backgroundColor: 'black',\r\n    ...NoSelectStyle\r\n}\r\n\r\nexport interface IModalProps{\r\n    uid:string\r\n    state?: IModalState\r\n    onInit?: Function\r\n}\r\n\r\nexport interface IModalState extends IPaneState{\r\n    uid:string\r\n    title?: string\r\n    enabled?: boolean\r\n    locked?: boolean\r\n    transforms?: IModalTransforms\r\n    constraints?: IModalConstraints\r\n    draggable?: boolean\r\n    minable?: boolean\r\n    canResize?: boolean\r\n    minimized?: boolean\r\n    closeable?: boolean\r\n    absCenter?: boolean\r\n}\r\n\r\nexport interface IModalTransforms{\r\n    x?: number | string\r\n    y?: number | string\r\n    z?: number\r\n    w?: number | string\r\n    h?: number | string\r\n}\r\nexport interface IModalConstraints {\r\n    x?:IModalConstraintsMinMax\r\n    y?:IModalConstraintsMinMax\r\n    w?:IModalConstraintsMinMax\r\n    h?:IModalConstraintsMinMax\r\n}\r\n\r\nexport interface IModalConstraintsMinMax{\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport class Modal<T extends IModalProps, S extends IModalState> extends Component<T, S>{\r\n    \r\n    public onInit: Nullable<Function> = null\r\n\r\n    public get uid():string{\r\n        return this.props.uid\r\n    }\r\n\r\n    public get enabled():boolean{\r\n        return this.state?.enabled ?? true\r\n    }\r\n    \r\n    public get draggable():boolean{\r\n        return this.state?.draggable ?? false\r\n    }\r\n\r\n    public get minable():boolean{\r\n        return this.state?.minable ?? false\r\n    }\r\n\r\n    public get closeable():boolean{\r\n        return this.state?.closeable ?? false\r\n    }\r\n\r\n    public get minimized():boolean{\r\n        return this.state?.minimized ?? false\r\n    }\r\n\r\n    public get title():Nullable<string>{\r\n        return this.state?.title ?? null\r\n    }\r\n\r\n    public get absCenter():boolean{\r\n        return this.state?.absCenter ?? false\r\n    }\r\n\r\n    public get transforms():IModalTransforms{\r\n        return this.state?.transforms ?? {}\r\n    }\r\n\r\n    public get constraints():IModalConstraints{\r\n        return this.state?.constraints ?? {}\r\n    }\r\n\r\n    public get canResize():boolean{\r\n        return this.state?.canResize ?? false\r\n    }\r\n\r\n    private ref = createRef<HTMLDivElement>()\r\n    public getRef(){\r\n        return this.ref\r\n    }\r\n    private headRef = createRef<HTMLDivElement>()\r\n    private titleRef = createRef<HTMLDivElement>()\r\n    private controlRef = createRef<HTMLDivElement>()\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {...props.state, ...{...props.metaData}, uid:props.uid}\r\n        this.mutators = {...props.mutators}\r\n        this.onInit = props.onInit ?? this.onInit\r\n    }\r\n\r\n    componentWillMount(){\r\n        if(this.onInit){\r\n            this.onInit()\r\n        }\r\n    }\r\n    \r\n    public content():any{\r\n        return (\r\n            \"\"\r\n        )\r\n    }\r\n\r\n    public render(){        \r\n        const currentStyle: CSSProperties = {\r\n            ...modalWrapperStyle\r\n        }\r\n        \r\n        if(this.absCenter){\r\n            currentStyle.position = 'absolute'\r\n            currentStyle.left = '50%'\r\n            currentStyle.top = '50%'\r\n            currentStyle.transform = 'translate(-50%, -50%)'\r\n        }\r\n\r\n        if (this.draggable) {\r\n            currentStyle.position = 'absolute'\r\n            currentStyle.left = this.transforms?.x ?? 0;\r\n            currentStyle.top = this.transforms?.y ?? 0;\r\n            currentStyle.zIndex = this.transforms?.z ?? 0;\r\n            currentStyle.width = this.transforms?.w ?? 'auto';\r\n            currentStyle.height = this.transforms?.h ?? 'auto';\r\n            currentStyle.WebkitBoxShadow = '1px 1px 3px 1px rgba(60,60,60,0.2)';\r\n            currentStyle.boxShadow = '1px 1px 3px 1px rgba(60,60,60,0.2)';\r\n            currentStyle.transform = '';\r\n        }\r\n\r\n        if(this.minimized){\r\n            currentStyle.height = this.getModuleHeaderMinHeight()\r\n        }\r\n\r\n        const headMutators = {\r\n            onCloseModal: ()=>{this.mutators.closeChild(this.uid)},\r\n            onModalMinToggle: (e)=>{ this.onModalMinToggle(e)},\r\n            onModalDragStart:(e)=>{ this.onModalDragStart(e); console.log(this.uid)}\r\n        }\r\n\r\n        return this.enabled ? (\r\n            <ModalBody refPassthough={this.ref} canResize={this.canResize} style={{...currentStyle}} mutators={{onModalResizeStart:(e)=>{ this.onModalResizeStart(e)}}}>\r\n                <ModalHead \r\n                    refPassthough={{head : this.headRef, title: this.titleRef, controls: this.controlRef}}\r\n                    title={this.title} draggable={this.draggable}\r\n                    mutators={{...headMutators}}\r\n                    minable={this.minable}\r\n                    closeable={this.closeable}\r\n                    />\r\n                {<ModalContent>{this.content()}</ModalContent>}\r\n            </ModalBody>\r\n        ):\r\n        null\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        //console.log(\"UPDATE\")\r\n    }\r\n\r\n    mutators:any = {}\r\n\r\n    getRefParent(): any{\r\n        return this.ref.current?.parentNode ?? null\r\n    }\r\n\r\n    getRefParentRect(){\r\n        return this.getRefParent()?.getBoundingClientRect() ?? {\r\n            bottom: 0,\r\n            height: 600,\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            width: 800,\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n\r\n    sortChildrenZ(){\r\n        const children = [...this.getRefParent().children]\r\n        if(children.length){\r\n            const modals = children.filter((el)=>{\r\n                return el.classList.contains('modal-wrapper')\r\n            })\r\n            let i = 0\r\n            const sorted = modals.map((child)=>{\r\n                console.log(child.style.zIndex)\r\n                if(!child.style.zIndex){\r\n                    child.style.zIndex = (i++)\r\n                }\r\n                return child\r\n            }).sort((a,b)=>{return a.style.zIndex-b.style.zIndex})\r\n            i = 0\r\n            const reduced = sorted.map((child)=>{\r\n                child.style.zIndex = i++\r\n                return child\r\n            })          \r\n            const ref = this.getRef().current\r\n            if(ref){\r\n                ref.style.zIndex = (children.length+1)+''\r\n            }\r\n        }        \r\n    }\r\n\r\n    onModalDragStart(e){    \r\n        this.sortChildrenZ()     \r\n        const onDragRun = (_e)=>{\r\n            const parentRect = this.getRefParentRect()\r\n            const rect:any = this.ref.current?.getBoundingClientRect()\r\n            const newTrans = {...this.transforms}         \r\n\r\n            if( _e.clientX < 0 || \r\n                _e.clientY < 0 ||\r\n                _e.clientX > parentRect.width ||\r\n                _e.clientY > parentRect.height\r\n            ){\r\n                newTrans.x = Math.min(Math.max(0, _e.clientX), parentRect.width - rect.width)\r\n                newTrans.y = Math.min(Math.max(0, _e.clientY), parentRect.height - rect.height)\r\n            }else{                            \r\n                newTrans.x = Math.min(Math.max(0, (rect.x ?? newTrans.x ?? 0 ) + _e.movementX), parentRect.width - rect.width)\r\n                newTrans.y = Math.min(Math.max(0, (rect.y ?? newTrans.y ?? 0 ) + _e.movementY), parentRect.height - rect.height)               \r\n            }\r\n            this.setState({transforms:newTrans})\r\n        }\r\n        this.mutators.onDragRun = {listener:'mousemove', callback:onDragRun}\r\n\r\n        const onModalDragOver = ()=>{\r\n            console.log(\"MOUSE UP - DRAG\", window)\r\n            window.removeEventListener('mousemove', this.mutators.onDragRun.callback)\r\n            window.removeEventListener('mouseup', this.mutators.onModalDragOverUp.callback)\r\n            window.removeEventListener('mouseleave', this.mutators.onModalDragOverLeave.callback)\r\n            this.mutators.onDragRun = null\r\n            this.mutators.onModalDragOverUp = null\r\n            this.mutators.onModalDragOverLeave = null\r\n        }\r\n        this.mutators.onModalDragOverUp =  {listener:'mouseup', callback:onModalDragOver}\r\n        this.mutators.onModalDragOverLeave =  {listener:'mouseleave', callback:onModalDragOver}\r\n\r\n        window.addEventListener('mousemove', this.mutators.onDragRun.callback)\r\n        window.addEventListener('mouseup', this.mutators.onModalDragOverUp.callback)\r\n        window.addEventListener('mouseleave', this.mutators.onModalDragOverLeave.callback, {passive:true}) \r\n    }\r\n\r\n    onModalMinToggle(e){\r\n        this.sortChildrenZ()         \r\n        this.setState({minimized: !this.minimized})\r\n    }\r\n\r\n    getHeaderRef(){\r\n        return this.headRef.current ?? null\r\n    }\r\n\r\n    getHeaderRefRect(){\r\n        return this.getHeaderRef()?.getBoundingClientRect()\r\n    }\r\n\r\n    getModuleHeaderMinHeight(){      \r\n        return (this.getHeaderRefRect()?.height ?? 0)\r\n    }\r\n\r\n    getTitleRef(){\r\n        return this.titleRef.current ?? null\r\n    }\r\n\r\n    getTitleRefRect(){\r\n        return this.getTitleRef()?.getBoundingClientRect()\r\n    }\r\n\r\n    getModuleTitleMinWidth(){      \r\n        return (this.getTitleRefRect()?.width ?? 0)\r\n    }\r\n\r\n    getControlsRef(){\r\n        return this.titleRef.current ?? null\r\n    }\r\n\r\n    getControlsRefRect(){\r\n        return this.getControlsRef()?.getBoundingClientRect()\r\n    }\r\n\r\n    getModuleControlsMinWidth(){      \r\n        return (this.getControlsRefRect()?.width ?? 0)\r\n    }\r\n\r\n    getModuleHeadMinWidth(){\r\n        return this.getModuleTitleMinWidth()+this.getModuleControlsMinWidth()+6\r\n    }\r\n\r\n    leftScale(transforms, rect, parentRect, minWidth, change){\r\n        if((this.minimized === true)){\r\n            return\r\n        }   \r\n        if(transforms.w === undefined){\r\n            transforms.w = rect.width\r\n        }\r\n        if(transforms.x === undefined){\r\n            transforms.x = rect.x\r\n        }\r\n        transforms.x = Math.min(Math.max(0, transforms.x + change), parentRect.width - minWidth)\r\n        transforms.w = Math.max(minWidth, transforms.w - change)\r\n    }\r\n\r\n    topScale(transforms, rect, parentRect, minHeight, change){\r\n        if((this.minimized === true)){\r\n            return\r\n        }   \r\n        if(transforms.h === undefined){\r\n            transforms.h = rect.height\r\n        }\r\n        if(transforms.y === undefined){\r\n            transforms.y = rect.y\r\n        }\r\n        transforms.y = Math.min(Math.max(0, transforms.y + change), parentRect.height - minHeight)\r\n        transforms.h = Math.max(minHeight, transforms.h - change)\r\n    }\r\n\r\n    rightScale(transforms, rect, parentRect, minWidth){\r\n        if((this.minimized === true)){\r\n            return\r\n        }\r\n        if(transforms.w === undefined){\r\n            transforms.w = rect.width\r\n        }\r\n        transforms.w = Math.min(Math.max(minWidth, transforms.w + globalThis.MouseData.clientDirX), parentRect.width - rect.x)\r\n      }\r\n\r\n    bottomScale( transforms, rect, parentRect, minHeight){\r\n        if((this.minimized === true)){\r\n            return\r\n        }\r\n        if(transforms.h === undefined){\r\n            transforms.h = rect.height\r\n        }\r\n \r\n        transforms.h = Math.min(Math.max(minHeight, transforms.h + globalThis.MouseData.clientDirY), parentRect.height - rect.y)\r\n    }\r\n\r\n    onModalResizeStart(e){ \r\n        this.sortChildrenZ()       \r\n        const resizeSwitch = e.target.classList[0]\r\n        const transTemps:any = {\r\n            newTrans : null\r\n        }\r\n\r\n        const minHeight = this.getModuleHeaderMinHeight() + (this.constraints?.h?.min ?? 0)\r\n        const minWidth = this.getModuleHeadMinWidth() + (this.constraints?.w?.min ?? 0)\r\n        \r\n        const onResizeRun = (_e)=>{\r\n            const parentRect = this.getRefParentRect()\r\n            const rect:any = this.ref.current?.getBoundingClientRect()  \r\n            transTemps.newTrans = {...this.transforms}\r\n            switch(resizeSwitch){\r\n                case 'left':\r\n                    if( _e.clientX < 0 ||                      \r\n                        (transTemps.newTrans.w <= minWidth && globalThis.MouseData.clientDirX > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.leftScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirX)            \r\n                    }\r\n                break;\r\n                case 'top-left':\r\n                    if( _e.clientY < 0 ||                      \r\n                        (transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.topScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirY)            \r\n                    }\r\n                    if( _e.clientX < 0 ||                      \r\n                        (transTemps.newTrans.w <= minWidth && globalThis.MouseData.clientDirX > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.leftScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirX)            \r\n                    }\r\n                break;\r\n                case 'top':\r\n                    if( _e.clientY < 0 ||                      \r\n                        (transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.topScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirY)            \r\n                    }\r\n                break;\r\n                case 'top-right':\r\n                    if( _e.clientY < 0 ||                      \r\n                        (transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.topScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirY)            \r\n                    }\r\n                    if( _e.clientX < 0 ||                      \r\n                        _e.clientX > parentRect.width                   \r\n                    ){\r\n                        transTemps.newTrans.w = parentRect.width - rect.x - 6\r\n                    }else{                            \r\n                        this.rightScale(transTemps.newTrans, rect, parentRect, minWidth)            \r\n                    }\r\n                break;\r\n                case 'right':\r\n                    if( _e.clientX < 0 ||                      \r\n                        _e.clientX > parentRect.width                   \r\n                    ){\r\n                        transTemps.newTrans.w = parentRect.width - rect.x - 6\r\n                    }else{                            \r\n                        this.rightScale(transTemps.newTrans, rect, parentRect, minWidth)            \r\n                    }\r\n                break;\r\n                case 'bottom':\r\n                    if((transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY < 0)){\r\n                        return\r\n                    }\r\n                    if(                      \r\n                        _e.clientY > parentRect.height                   \r\n                    ){\r\n                        transTemps.newTrans.h = parentRect.height - rect.y - 6\r\n                    }else{                            \r\n                        this.bottomScale(transTemps.newTrans, rect, parentRect, minHeight)           \r\n                    }\r\n                break;\r\n                case 'bottom-right':\r\n                    if(!(transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY < 0)){\r\n                        if(                      \r\n                            _e.clientY > parentRect.height                   \r\n                        ){\r\n                            transTemps.newTrans.h = parentRect.height - rect.y - 6\r\n                        }else{                            \r\n                            this.bottomScale(transTemps.newTrans, rect, parentRect, minHeight)           \r\n                        }\r\n                    }                   \r\n                    if( _e.clientX < 0 ||                      \r\n                        _e.clientX > parentRect.width                   \r\n                    ){\r\n                        transTemps.newTrans.w = parentRect.width - rect.x - 6\r\n                    }else{                            \r\n                        this.rightScale(transTemps.newTrans, rect, parentRect, minWidth)            \r\n                    }\r\n                break;\r\n                case 'bottom-left':\r\n                    if(!(transTemps.newTrans.h <= minHeight && globalThis.MouseData.clientDirY < 0)){\r\n                        if(                      \r\n                            _e.clientY > parentRect.height                   \r\n                        ){\r\n                            transTemps.newTrans.h = parentRect.height - rect.y - 6\r\n                        }else{                            \r\n                            this.bottomScale(transTemps.newTrans, rect, parentRect, minHeight)           \r\n                        }\r\n                    } \r\n                    if( _e.clientX < 0 ||                      \r\n                        (transTemps.newTrans.w <= minWidth && globalThis.MouseData.clientDirX > 0)\r\n                    ){\r\n                        return\r\n                    }else{                            \r\n                        this.leftScale(transTemps.newTrans, rect, parentRect, minWidth, globalThis.MouseData.clientDirX)            \r\n                    }\r\n                break;\r\n            }        \r\n            this.setState({transforms:transTemps.newTrans})\r\n        }\r\n\r\n        this.mutators.onResizeRun = {listener:'mousemove', callback:onResizeRun}\r\n\r\n        const onModalResizeOver = ()=>{\r\n            console.log(\"MOUSE UP - RESIZE\", window)\r\n            window.removeEventListener('mousemove', this.mutators.onResizeRun.callback)\r\n            window.removeEventListener('mouseup', this.mutators.onModalResizeOverUp.callback)\r\n            window.removeEventListener('mouseleave', this.mutators.onModalResizeOverLeave.callback)\r\n            this.mutators.onResizeRun = null\r\n            this.mutators.onModalResizeOverUp = null\r\n            this.mutators.onModalResizeOverLeave = null\r\n        }\r\n        this.mutators.onModalResizeOverUp =  {listener:'mouseup', callback:onModalResizeOver}\r\n        this.mutators.onModalResizeOverLeave =  {listener:'mouseleave', callback:onModalResizeOver}\r\n\r\n        window.addEventListener('mousemove', this.mutators.onResizeRun.callback)\r\n        window.addEventListener('mouseup', this.mutators.onModalResizeOverUp.callback)\r\n        window.addEventListener('mouseleave', this.mutators.onModalResizeOverLeave.callback, {passive:true}) \r\n    }\r\n\r\n    componentWillUnmount(){\r\n        console.log(\"DESTORYING\", this)\r\n        Object.keys(this.mutators).forEach( e =>{\r\n            const m = this.mutators[e]\r\n            if(m){\r\n                window.removeEventListener(m.listener, m.callback)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst modalBodyStyle: CSSProperties = {\r\n    position: 'relative',\r\n    display: 'block',\r\n    pointerEvents: 'initial',\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: Colors.ModalBackgroundLight,\r\n    ...NoSelectStyle,\r\n    overflow:'hidden'\r\n}\r\n\r\nexport interface IModalBodyProps{\r\n    refPassthough: any\r\n    canResize?: boolean\r\n    style?:CSSProperties\r\n    mutators?: any\r\n}\r\n\r\nclass ModalBody<T extends IModalBodyProps, S = {}> extends Component<T, S>{\r\n    get ref(){\r\n        return this.props.refPassthough\r\n    }\r\n    public get canResize():boolean{\r\n        return this.props?.canResize ?? false\r\n    }\r\n    public get mutators():Nullable<any>{\r\n        return this.props?.mutators ?? null\r\n    }\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state} \r\n    }\r\n    public render(){\r\n        return (\r\n            <div ref={this.ref} className='modal-wrapper' style={this.props.style}>\r\n                {this.canResize && <ModalResize onMouseDown={this.mutators.onModalResizeStart ?? null}/>}\r\n                <div className='modal-body' style={modalBodyStyle}>\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst modalHeadStyle: CSSProperties = {\r\n    position: 'relative',\r\n    display: 'block',\r\n    pointerEvents: 'initial',\r\n    width: 'auto',\r\n    height: 'auto',\r\n    backgroundColor: Colors.ModalBackgroundDark\r\n}\r\n\r\nconst modalTitleStyle: CSSProperties = {\r\n    position: 'relative',\r\n    display: 'inline-block',\r\n    pointerEvents: 'none',\r\n    width: 'auto',\r\n    height: 'auto',\r\n    fontWeight:'bolder',\r\n    ...Padding.Small,\r\n    paddingLeft : Padding.Normal.paddingLeft,\r\n    ...NoSelectStyle\r\n}\r\n\r\nexport interface IModalHeadProps{\r\n    refPassthough: any\r\n    title?: Nullable<string>\r\n    draggable?: boolean\r\n    minable?: boolean\r\n    closeable?: boolean\r\n    mutators?: any\r\n}\r\n\r\nclass ModalHead<T extends IModalHeadProps, S = {}> extends Component<T, S>{\r\n\r\n    public get title():Nullable<string>{\r\n        return this.props?.title ?? null\r\n    }\r\n\r\n    public get mutators():Nullable<any>{\r\n        return this.props?.mutators ?? null\r\n    }\r\n\r\n    public get refPassthough():any{\r\n        return this.props?.refPassthough\r\n    }\r\n    \r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state} \r\n    } \r\n\r\n    public render(){\r\n        const currentHeadStyle = {\r\n            ...modalHeadStyle,\r\n            cursor : this.props.draggable?'move':'initial'\r\n        }\r\n        return this.title?(\r\n            <div ref={this.refPassthough.head} className='modal-head' style={currentHeadStyle} onMouseDown={this.mutators.onModalDragStart ?? null}>\r\n                <div className='modal-title' ref={this.refPassthough.title} style={modalTitleStyle}>{this.title}</div>\r\n                {<ModalControls refPassthough={this.refPassthough.controls} mutators={{onMinClick:this.mutators.onModalMinToggle, onCloseClick:this.mutators.onCloseModal}} minable={this.props.minable} closeable={this.props.closeable} />}                \r\n            </div>\r\n        ):null\r\n    }\r\n}\r\n\r\nconst modalContentStyle: CSSProperties = {\r\n    position: 'absolute',\r\n    display: 'block',\r\n    width: '100%',\r\n    height:'calc(100% - 2.15em)',\r\n    bottom: 0,\r\n    ...SelectStyle\r\n}\r\n\r\nexport interface IModalContentProps{}\r\nclass ModalContent<T extends IModalContentProps, S = {}> extends Component<T, S>{\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state} \r\n    }\r\n\r\n    public render(){\r\n        return (\r\n            <div className='modal-content' style={modalContentStyle}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","F:\\gitHUB\\pane-editor\\src\\components\\pane\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\constants\\padding.tsx",[],"F:\\gitHUB\\pane-editor\\src\\constants\\bindings.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\modal\\modalResize.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\inputs\\button.tsx",[],"F:\\gitHUB\\pane-editor\\src\\constants\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\constants\\text.tsx",[],["132","133"],"F:\\gitHUB\\pane-editor\\src\\components\\modal\\modalControls.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\inputs\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\babylonManager\\core.ts",["134","135","136","137","138","139","140","141","142"],"import {Engine, Scene, FreeCamera, EngineView, Vector3, Nullable, DeviceInputSystem, PointerInput, DeviceType} from '@babylonjs/core'\r\nimport { EngineCache } from './engine/engineCache'\r\n\r\n\r\n\r\nexport class BabylonManager{ \r\n    private _engineCache:EngineCache = new EngineCache()   \r\n\r\n    constructor(private params){\r\n\r\n    }\r\n\r\n    createEngineSlot(uid:string, params:any={}){\r\n        return this._engineCache.createEngineSlot(uid, params)\r\n    }\r\n\r\n    getEngineSlot(uid:string){\r\n        return this._engineCache.slots.get(uid)\r\n    }\r\n\r\n    getAllEngineSlots(){\r\n        return this._engineCache.slots\r\n    }\r\n\r\n    addSceneToSlot(slot, params){\r\n        return this._engineCache.addSceneToSlot(slot, params)\r\n    }\r\n\r\n\r\n    \r\n    // public getScene(uid){\r\n    //     return this._scenes.get(uid)\r\n    // }\r\n    // public getScenes(){\r\n    //     return this._scenes\r\n    // }\r\n}\r\n\r\n",["143","144"],"F:\\gitHUB\\pane-editor\\src\\babylonManager\\engine\\engineCache.ts",[],"F:\\gitHUB\\pane-editor\\src\\windows\\test\\test.tsx",["145","146","147","148","149"],"F:\\gitHUB\\pane-editor\\src\\windows\\map.tsx",[],"F:\\gitHUB\\pane-editor\\src\\windows\\test\\testSubSplit.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\panel\\splitPanel\\splitPanel.tsx",["150","151","152"],"\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport zIndex from \"@material-ui/core/styles/zIndex\";\r\nimport { createContext, createRef, FC, useContext, useEffect, useRef, useState } from \"react\"\r\nimport { Colors, Shadows } from \"../../../constants\";\r\n\r\nconst splitPanelContext = createContext<any>({});\r\n\r\nconst useStyles = makeStyles({\r\n    splitPane: {\r\n        position:'relative',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%'     \r\n    },\r\n    seperator:{\r\n        height:1,\r\n        background:Colors.ModalBackgroundLight,\r\n        position:'relative',\r\n        ...Shadows.OutlineSmall,\r\n        zIndex:101\r\n    },\r\n    overAnchor:{ \r\n        cursor: 'row-resize',\r\n        position:'absolute',\r\n        display: 'block',       \r\n        background:'rgba(0,0,0, 0.001)',\r\n        left:0, top:-2, right:0, bottom:-2\r\n    }\r\n})\r\n\r\nexport const SplitPanelVertical: FC<any> = ({children, ...props})=>{\r\n    const classes = useStyles()\r\n    const [topHeight, setTopHeight] = useState(props.topHeight ?? 0);    \r\n\r\n    const isDragging = useRef<number>()\r\n\r\n    const splitPaneRef = createRef<HTMLDivElement>()\r\n\r\n    const onMouseDown = e => {\r\n        isDragging.current = 1\r\n    }\r\n\r\n    const onMouseMove = e => {\r\n        if (!isDragging.current) {\r\n            return\r\n        }\r\n       \r\n        let newTopHeight = topHeight + (globalThis.MouseData.clientDirY)\r\n        if(splitPaneRef.current?.parentNode){\r\n            const parentHeight = (splitPaneRef.current?.parentNode as HTMLDivElement).getBoundingClientRect().height\r\n            if(newTopHeight <= 0 ){\r\n                newTopHeight = 0\r\n            }else if( newTopHeight >=  parentHeight - 3){\r\n                newTopHeight = parentHeight - 3\r\n            }\r\n            setTopHeight(newTopHeight)\r\n        }\r\n    }\r\n\r\n    const onMouseUp = () => {\r\n        isDragging.current = 0\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousemove\", onMouseMove)\r\n        document.addEventListener(\"mouseup\", onMouseUp);\r\n\r\n        return () => {\r\n        document.removeEventListener(\"mousemove\", onMouseMove)\r\n        document.removeEventListener(\"mouseup\", onMouseUp)\r\n        }\r\n    })\r\n\r\n    return (\r\n    <div {...props} className={classes.splitPane} ref={splitPaneRef}>\r\n        <splitPanelContext.Provider value={{ topHeight, setTopHeight }}>\r\n        {children[0]}\r\n        <div className={classes.seperator} onMouseDown={onMouseDown}>\r\n            <div className={classes.overAnchor}></div>\r\n        </div>\r\n        {children[1]}\r\n        </splitPanelContext.Provider>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst useStyles2 = makeStyles({splitPaneVertical:{\r\n    position:'relative',\r\n    flex: 1,\r\n    overflow:'hidden',\r\n    height: '50%'\r\n}})\r\n\r\nexport const SplitPanelTop: FC<any> =  ({children, ...props}) => {\r\n    const classes = useStyles2()\r\n    const topRef = createRef<HTMLDivElement>()\r\n    const { topHeight, setTopHeight } = useContext(splitPanelContext);\r\n\r\n    useEffect(() => {\r\n        if (!topHeight && topRef.current) {\r\n            setTopHeight(topRef.current.clientHeight);\r\n            topRef.current.style.flex = \"none\";\r\n        return;\r\n        }\r\n\r\n        if(topRef.current){\r\n            topRef.current.style.height = `${topHeight}px`;\r\n        }    \r\n    },[topHeight])\r\n    \r\n    return <div {...props} className={classes.splitPaneVertical} ref={topRef} >\r\n        {children}\r\n    </div>\r\n}\r\n\r\nexport const SplitPanelBottom: FC<any> =  ({children, ...props}) => {\r\n    const classes = useStyles2()\r\n    return <div {...props} className={classes.splitPaneVertical} >\r\n        {children}\r\n    </div>\r\n}\r\n\r\nconst useStyles3 = makeStyles({\r\n    splitPane: {\r\n        position:'relative',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    seperator:{\r\n        width:1,\r\n        background:Colors.ModalBackgroundLight,        \r\n        zIndex:101,\r\n        ...Shadows.OutlineSmall,\r\n        position:'relative' \r\n    },\r\n    overAnchor:{ \r\n        cursor: 'col-resize',\r\n        position:'absolute',\r\n        display: 'block',\r\n        background:'rgba(0,0,0, 0.001)',\r\n        left:-2, top:0, right:-2, bottom:0,\r\n        zIndex:2\r\n    }\r\n})\r\n\r\nexport const SplitPanelHorizontal: FC<any> = ({children, ...props})=>{\r\n    const classes = useStyles3()\r\n    const [leftWidth, setLeftWidth] = useState(props.leftWidth ?? 0);    \r\n\r\n    const isDragging = useRef<number>()\r\n\r\n    const splitPaneRef = createRef<HTMLDivElement>()\r\n\r\n    const onMouseDown = e => {\r\n        isDragging.current = 1\r\n    }\r\n\r\n    const onMouseMove = e => {\r\n        if (!isDragging.current) {\r\n            return\r\n        }\r\n       \r\n        let newLeftWidth = leftWidth + (globalThis.MouseData.clientDirX)\r\n        if(splitPaneRef.current?.parentNode){\r\n            const parentWidth = (splitPaneRef.current?.parentNode as HTMLDivElement).getBoundingClientRect().width\r\n            if(newLeftWidth <= 0 ){\r\n                newLeftWidth = 0\r\n            }else if( newLeftWidth >=  parentWidth - 3){\r\n                newLeftWidth = parentWidth - 3\r\n            }\r\n            setLeftWidth(newLeftWidth)\r\n        }\r\n    }\r\n\r\n    const onMouseUp = () => {\r\n        isDragging.current = 0\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousemove\", onMouseMove)\r\n        document.addEventListener(\"mouseup\", onMouseUp);\r\n\r\n        return () => {\r\n        document.removeEventListener(\"mousemove\", onMouseMove)\r\n        document.removeEventListener(\"mouseup\", onMouseUp)\r\n        }\r\n    })\r\n\r\n    return (\r\n    <div {...props} className={classes.splitPane} ref={splitPaneRef}>\r\n        <splitPanelContext.Provider value={{ leftWidth, setLeftWidth }}>\r\n        {children[0]}\r\n        <div className={classes.seperator} onMouseDown={onMouseDown}>\r\n            <div className={classes.overAnchor}></div>\r\n        </div>\r\n        {children[1]}\r\n        </splitPanelContext.Provider>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles4 = makeStyles({splitPaneHorizontal:{\r\n    position:'relative',\r\n    flex: 1,\r\n    overflow:'hidden',\r\n    width: '50%',\r\n    height: '100%'\r\n}})\r\n\r\n\r\nexport const SplitPanelLeft: FC<any> =  ({children, ...props}) => {\r\n    const classes = useStyles4()\r\n    const leftRef = createRef<HTMLDivElement>()\r\n    const { leftWidth, setLeftWidth } = useContext(splitPanelContext);\r\n\r\n    useEffect(() => {\r\n        if (!leftWidth && leftRef.current) {\r\n            setLeftWidth(leftRef.current.clientWidth);\r\n            leftRef.current.style.flex = \"none\";\r\n        return;\r\n        }\r\n\r\n        if(leftRef.current){\r\n            leftRef.current.style.width = `${leftWidth}px`;\r\n        }    \r\n    },[leftWidth])\r\n    \r\n    return <div {...props} className={classes.splitPaneHorizontal} ref={leftRef} >\r\n        {children}\r\n    </div>\r\n}\r\n\r\nexport const SplitPanelRight: FC<any> =  ({children, ...props}) => {\r\n    const classes = useStyles4()\r\n    return <div {...props} className={classes.splitPaneHorizontal} >\r\n        {children}\r\n    </div>\r\n}","F:\\gitHUB\\pane-editor\\src\\components\\panel\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\components\\panel\\splitPanel\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\constants\\colors.tsx",["153"],"import { Color4 } from '@babylonjs/core'\r\n\r\nexport class Colors{\r\n    static ModalBackgroundLight: string = \"rgb(132, 147, 145)\"\r\n    static ModalBackgroundDark: string = \"rgb(72, 87, 85)\"\r\n    static OffWhite: string = \"rgb(226, 232, 232)\"\r\n    static DarkWhite: string = \"rgb(186, 192, 192)\"\r\n    static Gray: string = \"rgb(82, 87, 85)\"\r\n    static DarkGray: string = \"rgb(42, 57, 55)\"\r\n    static GunMetal: string = 'rgb(46 57 57)'\r\n}\r\n\r\n",["154","155"],"F:\\gitHUB\\pane-editor\\src\\constants\\shadows.tsx",[],"F:\\gitHUB\\pane-editor\\src\\components\\panel\\tabPanel\\tabPanel.tsx",["156"],"import React, { Component } from 'react';\r\nimport { CSSProperties } from '@material-ui/styles';\r\nimport { Colors } from '../../../constants';\r\n\r\nexport interface IPanelProps{\r\n  mutators?:any\r\n  selectedTab?:number\r\n}\r\n\r\nconst panelStyle: CSSProperties = {\r\n    position:'absolute',\r\n    display:'block',\r\n    width:'100%',\r\n    height:'100%',\r\n    top:0,\r\n    left:0    \r\n}\r\n\r\nconst panelContentStyle: CSSProperties = {\r\n    position:'relative',\r\n    display:'block',\r\n    overflowY:'auto',\r\n    width:'100%',\r\n}\r\n\r\nexport class TabPanel extends Component<any, any>{\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state, selectedTab: props.selectedTab ?? 0}\r\n    }\r\n    \r\n    render(){        \r\n        const sections = Array.isArray(this.props?.children)?[...this.props.children]:[this.props.children]\r\n                \r\n        const panelHeightStyle: CSSProperties = {\r\n            height : (sections.length > 1)?'calc(100% - 1.5em)':'100%'\r\n        }   \r\n\r\n        return (\r\n        <div style={{...panelStyle, ...this.props.style}}>\r\n            {\r\n                (sections.length > 1) && \r\n                <PanelTabs {...this.props} onTabClick={(index)=>{\r\n                    this.setState({\r\n                        selectedTab:index\r\n                    })\r\n                }}\r\n                selectedTab={this.state.selectedTab}\r\n                ></PanelTabs>\r\n            }\r\n        \r\n            <div style={{...panelContentStyle, ...panelHeightStyle}} >\r\n                {\r\n                    sections.map((section, index)=>{\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                {this.state.selectedTab === index && <PanelSection title={(section as any).props?.title ?? index} {...(section as any).props} selectedTab={this.state.selectedTab} isCurrent={true} />}\r\n                                {this.state.selectedTab !== index && <PanelSection title={(section as any).props?.title ?? index} {...(section as any).props} selectedTab={this.state.selectedTab} isCurrent={false}/>}\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n            </div>   \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst panelTabsStyle: CSSProperties = {\r\n    position:'relative',\r\n    display:'block',\r\n    height:'1.5em',\r\n    paddingTop:'0.1em',\r\n    background:Colors.Gray\r\n}\r\n\r\nexport class PanelTabs extends Component<any, any>{\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state, selectedTab: props.selectedTab ?? 0}\r\n    }\r\n\r\n    render(){\r\n        const selectedTab = this.props.selectedTab ?? 0  \r\n        console.log(this.props)      \r\n        const sections = Array.isArray(this.props?.children)?[...this.props.children]:[this.props.children]\r\n        return (\r\n            <div style={{...panelTabsStyle}}>\r\n                {                    \r\n                    sections.map((section, index)=>{\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                {selectedTab === index && <PanelTab isCurrent={true} title={(section as any).props?.title ?? index} index={index} onTabClick={this.props.onTabClick}/>}\r\n                                {selectedTab !== index && <PanelTab isCurrent={false} title={(section as any).props?.title ?? index} index={index} onTabClick={this.props.onTabClick}/>}\r\n                            </React.Fragment>                               \r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nconst panelTabStyle: CSSProperties = {\r\n    display: 'inline-block',\r\n    width: 'auto',\r\n    height: '100%',\r\n    fontWeight:'bold',   \r\n    paddingLeft: '0.5em',\r\n    paddingRight: '0.5em',\r\n    textAlign: 'center',\r\n    marginRight:'0.32em',\r\n    textDecoration:'none',\r\n    cursor:'pointer'\r\n}\r\n\r\nexport interface IPanelTabProps{\r\n    title?:string\r\n    isCurrent?:boolean\r\n    mutators?:any\r\n    frameUid?:string\r\n    modalUid?:string\r\n    index?:number\r\n    onTabClick: Function\r\n}\r\n\r\nexport class PanelTab extends Component<any, any>{\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state, selectedTab: props.selectedTab ?? 0}\r\n    }\r\n\r\n    render(){\r\n        const isCurrentStyle: CSSProperties = {\r\n            background: (this.props.isCurrent)?Colors.OffWhite:Colors.DarkWhite,\r\n            color: (this.props.isCurrent)?'black':Colors.DarkGray\r\n        }  \r\n\r\n        return (\r\n            <a href='#' style={{...panelTabStyle, ...isCurrentStyle}} onClick={()=>{this.props.onTabClick(this.props.index)}}>{this.props.title}</a>\r\n        )\r\n    }  \r\n}\r\n\r\nconst panelSectionStyle: CSSProperties = {\r\n    width:'100%',\r\n    background: Colors.OffWhite\r\n}\r\n\r\nexport interface IPanelSectionProps{\r\n    title?:string\r\n    isCurrent?:boolean\r\n    style?:CSSProperties\r\n    mutators?:any\r\n    frameUid?:string\r\n    modalUid?:string\r\n    index?:number\r\n    sectionScroll?:number\r\n}\r\n\r\nexport class PanelSection extends Component<any, any>{\r\n    constructor(props, state){\r\n        super(props)\r\n        this.state = {...state, selectedTab: props.selectedTab ?? 0}\r\n    }\r\n\r\n    render(){\r\n        const displayStyle = {\r\n            display:(this.props.isCurrent)?'block':'none'\r\n        }   \r\n\r\n        return (\r\n            <div style={{...panelSectionStyle, ...this.props.style, ...displayStyle}}>{this.props.children}</div>\r\n        )\r\n    }  \r\n}\r\n\r\n","F:\\gitHUB\\pane-editor\\src\\windows\\test\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\windows\\grass\\index.ts",[],"F:\\gitHUB\\pane-editor\\src\\windows\\grass\\grassBaseScene.tsx",["157","158","159","160","161","162","163"],"F:\\gitHUB\\pane-editor\\src\\components\\loader\\index.ts",[],{"ruleId":"164","severity":1,"message":"165","line":7,"column":10,"nodeType":"166","messageId":"167","endLine":7,"endColumn":18},{"ruleId":"164","severity":1,"message":"168","line":17,"column":7,"nodeType":"166","messageId":"167","endLine":17,"endColumn":24},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"164","severity":1,"message":"173","line":234,"column":19,"nodeType":"166","messageId":"167","endLine":234,"endColumn":26},{"ruleId":"169","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"164","severity":1,"message":"176","line":1,"column":9,"nodeType":"166","messageId":"167","endLine":1,"endColumn":15},{"ruleId":"164","severity":1,"message":"177","line":1,"column":17,"nodeType":"166","messageId":"167","endLine":1,"endColumn":22},{"ruleId":"164","severity":1,"message":"178","line":1,"column":24,"nodeType":"166","messageId":"167","endLine":1,"endColumn":34},{"ruleId":"164","severity":1,"message":"179","line":1,"column":36,"nodeType":"166","messageId":"167","endLine":1,"endColumn":46},{"ruleId":"164","severity":1,"message":"180","line":1,"column":48,"nodeType":"166","messageId":"167","endLine":1,"endColumn":55},{"ruleId":"164","severity":1,"message":"165","line":1,"column":57,"nodeType":"166","messageId":"167","endLine":1,"endColumn":65},{"ruleId":"164","severity":1,"message":"181","line":1,"column":67,"nodeType":"166","messageId":"167","endLine":1,"endColumn":84},{"ruleId":"164","severity":1,"message":"182","line":1,"column":86,"nodeType":"166","messageId":"167","endLine":1,"endColumn":98},{"ruleId":"164","severity":1,"message":"183","line":1,"column":100,"nodeType":"166","messageId":"167","endLine":1,"endColumn":110},{"ruleId":"169","replacedBy":"184"},{"ruleId":"171","replacedBy":"185"},{"ruleId":"164","severity":1,"message":"186","line":3,"column":16,"nodeType":"166","messageId":"167","endLine":3,"endColumn":22},{"ruleId":"164","severity":1,"message":"176","line":4,"column":18,"nodeType":"166","messageId":"167","endLine":4,"endColumn":24},{"ruleId":"164","severity":1,"message":"165","line":4,"column":57,"nodeType":"166","messageId":"167","endLine":4,"endColumn":65},{"ruleId":"164","severity":1,"message":"187","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":26},{"ruleId":"164","severity":1,"message":"188","line":35,"column":23,"nodeType":"166","messageId":"167","endLine":35,"endColumn":28},{"ruleId":"164","severity":1,"message":"189","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":14},{"ruleId":"190","severity":1,"message":"191","line":110,"column":7,"nodeType":"192","endLine":110,"endColumn":18,"suggestions":"193"},{"ruleId":"190","severity":1,"message":"194","line":230,"column":7,"nodeType":"192","endLine":230,"endColumn":18,"suggestions":"195"},{"ruleId":"164","severity":1,"message":"196","line":1,"column":10,"nodeType":"166","messageId":"167","endLine":1,"endColumn":16},{"ruleId":"169","replacedBy":"197"},{"ruleId":"171","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":140,"column":13,"nodeType":"201","endLine":140,"endColumn":127},{"ruleId":"164","severity":1,"message":"202","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":16},{"ruleId":"164","severity":1,"message":"203","line":3,"column":18,"nodeType":"166","messageId":"167","endLine":3,"endColumn":34},{"ruleId":"164","severity":1,"message":"204","line":3,"column":36,"nodeType":"166","messageId":"167","endLine":3,"endColumn":47},{"ruleId":"164","severity":1,"message":"205","line":3,"column":49,"nodeType":"166","messageId":"167","endLine":3,"endColumn":65},{"ruleId":"164","severity":1,"message":"206","line":3,"column":118,"nodeType":"166","messageId":"167","endLine":3,"endColumn":135},{"ruleId":"164","severity":1,"message":"207","line":3,"column":137,"nodeType":"166","messageId":"167","endLine":3,"endColumn":151},{"ruleId":"164","severity":1,"message":"208","line":211,"column":36,"nodeType":"166","messageId":"167","endLine":211,"endColumn":46},"@typescript-eslint/no-unused-vars","'Nullable' is defined but never used.","Identifier","unusedVar","'randomSetofScenes' is assigned a value but never used.","no-native-reassign",["209"],"no-negated-in-lhs",["210"],"'reduced' is assigned a value but never used.",["209"],["210"],"'Engine' is defined but never used.","'Scene' is defined but never used.","'FreeCamera' is defined but never used.","'EngineView' is defined but never used.","'Vector3' is defined but never used.","'DeviceInputSystem' is defined but never used.","'PointerInput' is defined but never used.","'DeviceType' is defined but never used.",["209"],["210"],"'getUid' is defined but never used.","'IEngineCacheSlot' is defined but never used.","'light' is assigned a value but never used.","'zIndex' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTopHeight' and 'topRef'. Either include them or remove the dependency array.","ArrayExpression",["211"],"React Hook useEffect has missing dependencies: 'leftRef' and 'setLeftWidth'. Either include them or remove the dependency array.",["212"],"'Color4' is defined but never used.",["209"],["210"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Color3' is defined but never used.","'HemisphericLight' is defined but never used.","'MeshBuilder' is defined but never used.","'StandardMaterial' is defined but never used.","'ProceduralTexture' is defined but never used.","'DynamicTexture' is defined but never used.","'heightHalf' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [setTopHeight, topHeight, topRef]",{"range":"217","text":"218"},"Update the dependencies array to be: [leftRef, leftWidth, setLeftWidth]",{"range":"219","text":"220"},[3307,3318],"[setTopHeight, topHeight, topRef]",[6718,6729],"[leftRef, leftWidth, setLeftWidth]"]:3,"endColumn":65},{"ruleId":"163","severity":1,"message":"205","line":3,"column":118,"nodeType":"165","messageId":"166","endLine":3,"endColumn":135},{"ruleId":"163","severity":1,"message":"206","line":3,"column":137,"nodeType":"165","messageId":"166","endLine":3,"endColumn":151},{"ruleId":"163","severity":1,"message":"207","line":211,"column":36,"nodeType":"165","messageId":"166","endLine":211,"endColumn":46},"@typescript-eslint/no-unused-vars","'Nullable' is defined but never used.","Identifier","unusedVar","'randomSetofScenes' is assigned a value but never used.","no-native-reassign",["208"],"no-negated-in-lhs",["209"],"'reduced' is assigned a value but never used.",["208"],["209"],"'Engine' is defined but never used.","'Scene' is defined but never used.","'FreeCamera' is defined but never used.","'EngineView' is defined but never used.","'Vector3' is defined but never used.","'DeviceInputSystem' is defined but never used.","'PointerInput' is defined but never used.","'DeviceType' is defined but never used.",["208"],["209"],"'getUid' is defined but never used.","'IEngineCacheSlot' is defined but never used.","'light' is assigned a value but never used.","'zIndex' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTopHeight' and 'topRef'. Either include them or remove the dependency array.","ArrayExpression",["210"],"React Hook useEffect has missing dependencies: 'leftRef' and 'setLeftWidth'. Either include them or remove the dependency array.",["211"],"'Color4' is defined but never used.",["208"],["209"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Color3' is defined but never used.","'HemisphericLight' is defined but never used.","'MeshBuilder' is defined but never used.","'StandardMaterial' is defined but never used.","'ProceduralTexture' is defined but never used.","'DynamicTexture' is defined but never used.","'heightHalf' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [setTopHeight, topHeight, topRef]",{"range":"216","text":"217"},"Update the dependencies array to be: [leftRef, leftWidth, setLeftWidth]",{"range":"218","text":"219"},[3307,3318],"[setTopHeight, topHeight, topRef]",[6718,6729],"[leftRef, leftWidth, setLeftWidth]"]